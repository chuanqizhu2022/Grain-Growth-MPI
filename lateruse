double ****phi, ***intphi;

        phi = new double ***[N];
        for (ii = 0; ii <= nm; ii++)
        {
            phi[ii] = new double **[NDX];
            for (i = 0; i <= ndmx; i++)
            {
                phi[ii][i] = new double *[NDY];
                for (j = 0; j <= ndmy; j++)
                {
                    phi[ii][i][j] = new double[NDZ];
                }
            }
        }

        intphi = new double **[NDX];
        for (i = 0; i <= ndmx; i++)
        {
            intphi[i] = new double *[NDY];
            for (j = 0; j <= ndmy; j++)
            {
                intphi[i][j] = new double[NDZ];
            }
        }

        for (i = 0; i <= ndmx; i++)
        {
            for (j = 0; j <= ndmy; j++)
            {
                for (k = 0; k <= ndmz; k++)
                {
                    for (ii = 1; ii <= nm - 1; ii++)
                    {
                        phi[ii][i][j][k] = 0.0;
                    }
                    phi[nm][i][j][k] = 1.0; // nm番目のフェーズフィールドを１に初期化
                }
            }
        }

        double ****phi, ****phi2;
        int ***phiNum, ****phiIdx;
        double ***intphi;

        phi = new double ***[N];
        phi2 = new double ***[N];
        for (ii = 0; ii <= nm; ii++)
        {
            phi[ii] = new double **[rows + 2];
            phi2[ii] = new double **[rows + 2];
            for (i = 0; i <= rows + 1; i++)
            {
                phi[ii][i] = new double *[NDY];
                phi2[ii][i] = new double *[NDY];
                for (j = 0; j <= ndmy; j++)
                {
                    phi[ii][i][j] = new double[NDZ];
                    phi2[ii][i][j] = new double[NDZ];
                }
            }
        }

        phiNum = new int **[rows + 2];
        for (i = 0; i <= rows + 1; i++)
        {
            phiNum[i] = new int *[NDY];

            for (j = 0; j <= ndmy; j++)
            {
                phiNum[i][j] = new int[NDZ];
            }
        }

        phiIdx = new int ***[N + 1];
        for (ii = 0; ii <= N; ii++)
        {
            phiIdx[ii] = new int **[rows + 2];
            for (i = 0; i <= rows + 1; i++)
            {
                phiIdx[ii][i] = new int *[NDY];
                for (j = 0; j <= ndmy; j++)
                {
                    phiIdx[ii][i][j] = new int[NDZ];
                }
            }
        }

        intphi = new double **[rows + 2];
        for (i = 0; i <= rows + 1; i++)
        {
            intphi[i] = new double *[NDY];
            for (j = 0; j <= ndmy; j++)
            {
                intphi[i][j] = new double[NDZ];
            }
        }



        // cos_al = (nx + ny + nz) / sqrt(3.0);
                                    // ep = epsilon0 * (1.0 + sqrt(cos_al * cos_al + rp * rp) + sqrt(1.0 - cos_al * cos_al + rp * rp) * tan(al0));
                                    // dphiabsdx = 1.0 / phiabs * (phidx * phidxx + phidy * phidxy + phidz * phidxz);
                                    // dphiabs2dx = 2.0 * (phidx * phidxx + phidy * phidxy + phidz * phidxz);
                                    // dcosdx = 1.0 / sqrt(3.0) / phiabs2 * ((phidxx + phidxy + phidxz) * phiabs - dphiabsdx * (phidx + phidy + phidz));
                                    // dsindx = -cos_al / sqrt(1.0 - cos_al * cos_al) * dcosdx;
                                    // dcosdphix = 1.0 / sqrt(3.0) / phiabs2 * (phiabs - nx * (phidx + phidy + phidz));
                                    // dsindphix = -cos_al / sqrt(1.0 - cos_al * cos_al) * dcosdphix;

                                    // dcosdphixdx = 1.0 / sqrt(3.0) * (-dphiabsdx / phiabs2 - 1.0 / pow(phiabs2, 3.0) * ((2.0 * phidx * phidxx + phidxx * phidy + phidx * phidxy + phidxx * phidz + phidx * phidxz) * phiabs * phiabs2 - (3.0 * phiabs * (phidx * phidxx + phidy * phidxy + phidz * phidxz) * (phidx + phidy + phidz) * phidx)));
                                    // dsindphixdx = ;
                                    // epdx = cos_al / sqrt(cos_al * cos_al + rp * rp) * dcosdx + tan(al0) * sqrt(1.0 - cos_al * cos_al) / sqrt(sin_al * sin_al + rp * rp) * dsindx;
                                    // epdphix = cos_al / sqrt(cos_al * cos_al + rp * rp) * dcosdphix + tan(al0) * sqrt(1.0 - cos_al * cos_al) / sqrt(sin_al * sin_al + rp * rp) * dsindphix;
                                    // epdphixdx = dcosdphix / (cos_al * cos_al + rp * rp) * (dcosdx * sqrt(cos_al * cos_al + rp * rp) - cos_al * cos_al / sqrt(cos_al * cos_al + rp * rp) * dcosdx) * dcosdphix + dcosdphixdx * cos_al / sqrt(cos_al * cos_al + rp * rp) + tan(al0) * ();